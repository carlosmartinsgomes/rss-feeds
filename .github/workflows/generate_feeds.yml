name: Generate RSS feeds (stable + businesswire)

on:
  push:
    branches: [ main ]
  workflow_dispatch:
  schedule:
    - cron: '0 */11 * * *'

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

permissions:
  contents: write

jobs:

  render-on-selfhosted:
    runs-on: self-hosted
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create linkedin_auth.json from base64 secret (if provided)
        run: |
          mkdir -p scripts
          if [ -n "${{ secrets.LINKEDIN_AUTH_JSON_B64 }}" ]; then
            echo "Decoding LINKEDIN_AUTH_JSON_B64 -> scripts/linkedin_auth.json"
            printf '%s' "${{ secrets.LINKEDIN_AUTH_JSON_B64 }}" | base64 --decode > scripts/linkedin_auth.json
            chmod 600 scripts/linkedin_auth.json || true
            echo "Created scripts/linkedin_auth.json (size: $(wc -c < scripts/linkedin_auth.json) bytes)"
          else
            echo "No secret LINKEDIN_AUTH_JSON_B64 provided — continuing without it."
          fi

      - name: Detect scripts dir
        id: detect
        shell: bash
        run: |
          if [ -d "./scripts" ]; then sd="scripts";
          elif [ -d "./rss-feeds/scripts" ]; then sd="rss-feeds/scripts";
          else sd=$(find . -type d -name scripts | head -n 1); sd="${sd#./}";
          fi
          echo "scripts_dir=$sd" >> $GITHUB_OUTPUT
          echo "Detected scripts_dir: $sd"

      - name: Set up Node.js (self-hosted)
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache scripts node_modules
        id: cache-node
        uses: actions/cache@v4
        with:
          path: |
            ${{ steps.detect.outputs.scripts_dir }}/node_modules
          key: node-mod-${{ runner.os }}-${{ env.NODE_VERSION }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            node-mod-${{ runner.os }}-${{ env.NODE_VERSION }}-

      - name: Install playwright into scripts (npm --prefix) and chromium (self-hosted, smart)
        shell: bash
        run: |
          SCRIPTS="${{ steps.detect.outputs.scripts_dir }}"
          if [ -z "$SCRIPTS" ]; then
            echo "No scripts dir detected -> skip playwright install"
            exit 0
          fi

          if [ ! -d "$SCRIPTS/node_modules/playwright" ]; then
            echo "Installing playwright package into $SCRIPTS (npm --prefix)..."
            npm install --prefix "$SCRIPTS" playwright --no-audit --no-fund --silent || { echo "npm install failed"; exit 1; }
          else
            echo "playwright package already present in $SCRIPTS/node_modules - skipping npm install"
          fi

          if [ -d "${HOME}/.cache/ms-playwright" ] && [ "$(ls -A ${HOME}/.cache/ms-playwright 2>/dev/null | wc -l)" -gt 0 ]; then
            echo "Playwright browsers already present in ${HOME}/.cache/ms-playwright -> skipping browser install"
          else
            echo "Playwright browsers not found in ${HOME}/.cache/ms-playwright -> installing chromium"
            npx --yes --prefix "$SCRIPTS" playwright install chromium || { echo "playwright browser install failed"; exit 1; }
          fi

          echo "Done playwright setup."

      - name: Render pages (parallel)
        shell: bash
        run: |
          SCRIPTS="${{ steps.detect.outputs.scripts_dir }}"
          if [ -z "$SCRIPTS" ]; then
            echo "No scripts dir detected -> skip rendering"
            exit 0
          fi
          mkdir -p "$SCRIPTS/rendered"
          if [ ! -f "$SCRIPTS/run_renders.js" ]; then
            echo "run_renders.js not found at $SCRIPTS/run_renders.js - skipping render"
            exit 0
          fi
          export RENDER_CONCURRENCY=${{ env.RENDER_CONCURRENCY || '4' }}
          if node "$SCRIPTS/run_renders.js"; then
            echo "run_renders.js finished successfully"
          else
            echo "run_renders.js failed (non-zero exit) — continuing workflow"
          fi
        env:
          SCRIPTS: ${{ steps.detect.outputs.scripts_dir }}
          RENDER_CONCURRENCY: 4

      - name: Render configured pages (for sites with render_file) - WHITELISTED hosts only
        shell: bash
        env:
          EXPLICIT_URLS: |
            https://inmodeinvestors.com/press-release
            https://www.darkreading.com/
            https://www.iotworldtoday.com/
            https://www.businesswire.com/newsroom
            https://www.businesswire.com/newsroom?page=2
            https://www.businesswire.com/newsroom?page=3
            https://www.businesswire.com/newsroom?page=4
            https://www.businesswire.com/newsroom?page=5
            https://digiday.com/
            https://adage.com/news/
            https://www.modernhealthcare.com/latest-news/
          SCRIPTS: ${{ steps.detect.outputs.scripts_dir }}
        run: |
          echo "Using SCRIPTS='${SCRIPTS:-scripts}' and EXPLICIT_URLS provided"
          SCRIPTS="${SCRIPTS:-scripts}"
          if [ -z "$SCRIPTS" ]; then
            echo "No scripts dir detected -> skip configured renders"
            exit 0
          fi
          if [ -f "$SCRIPTS/render_configured.js" ]; then
            node "$SCRIPTS/render_configured.js"
          else
            echo "render_configured.js not found at $SCRIPTS -> skipping"
          fi

      - name: Show rendered files (debug)
        working-directory: ${{ steps.detect.outputs.scripts_dir }}
        run: |
          echo "Contents of scripts/rendered (if any):"
          SCRIPTS="${{ steps.detect.outputs.scripts_dir }}"
          ls -la "$SCRIPTS/rendered" || echo "No rendered dir or empty"
        env:
          SCRIPTS: ${{ steps.detect.outputs.scripts_dir }}

      - name: Upload rendered HTML as artifact
        uses: actions/upload-artifact@v4
        with:
          name: rendered-html
          path: ${{ steps.detect.outputs.scripts_dir }}/rendered
          if-no-files-found: warn

      - name: Run linkedin extractor
        working-directory: ${{ steps.detect.outputs.scripts_dir }}
        run: |
          node render_linkedin_extract.js \
            'https://www.linkedin.com/groups/5146549/' \
            'https://www.linkedin.com/groups/4682610/' \
            'https://www.linkedin.com/groups/3875737/' \
            'https://www.linkedin.com/search/results/content/?datePosted=%22past-week%22&keywords=the%20trade%20desk&origin=FACETED_SEARCH' \
            'https://www.linkedin.com/search/results/content/?datePosted=%22past-week%22&keywords=pubmatic&origin=FACETED_SEARCH'
        env:
          LINKEDIN_EMAIL: ${{ secrets.LINKEDIN_EMAIL || '' }}
          LINKEDIN_PASSWORD: ${{ secrets.LINKEDIN_PASSWORD || '' }}
          HEADLESS: 'true'

      - name: Clean linkedin output files (.html .png)
        working-directory: ${{ steps.detect.outputs.scripts_dir }}
        run: |
          SCRIPTS="${{ steps.detect.outputs.scripts_dir }}"
          echo "Cleaning possible large debug files in $SCRIPTS/output ..."
          rm -f "$SCRIPTS/output"/*.html "$SCRIPTS/output"/*.png || true
          ls -la "$SCRIPTS/output" || true

      - name: Show produced linkedin files (debug)
        working-directory: ${{ steps.detect.outputs.scripts_dir }}
        run: |
          pwd
          echo "Scripts dir: $SCRIPTS / $(pwd)"
          ls -la || true
          ls -la output || true
          echo "---- head of output/linkedin.json (if exists) ----"
          test -f output/linkedin.json && (echo "LEN:" $(wc -c < output/linkedin.json) && head -n 200 output/linkedin.json) || echo "no linkedin.json"
          echo "---- list debug html/png ----"
          ls -la output/debug-* || true
          test -f linkedin_auth.json && echo "linkedin_auth.json exists (size: $(wc -c < linkedin_auth.json))" || echo "no linkedin_auth.json"
        env:
          SCRIPTS: ${{ steps.detect.outputs.scripts_dir }}

      - name: Upload linkedin artifact
        uses: actions/upload-artifact@v4
        with:
          name: linkedin-output
          path: ${{ steps.detect.outputs.scripts_dir }}/output
          if-no-files-found: warn

  build:
    needs: render-on-selfhosted
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download rendered HTML artifact
        uses: actions/download-artifact@v4
        with:
          name: rendered-html
          path: scripts/rendered

      - name: Show repo root (debug)
        run: |
          echo "GITHUB_WORKSPACE=$GITHUB_WORKSPACE"
          pwd
          ls -la
          echo "rendered dir (downloaded):"
          ls -la scripts/rendered || true

      - name: Detect scripts dir
        id: detect
        run: |
          if [ -d "./scripts" ]; then sd="scripts";
          elif [ -d "./rss-feeds/scripts" ]; then sd="rss-feeds/scripts";
          else sd=$(find . -type d -name scripts | head -n 1); sd="${sd#./}";
          fi
          echo "scripts_dir=$sd" >> $GITHUB_OUTPUT
          echo "Detected scripts_dir: $sd"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache scripts node_modules
        id: cache-node
        uses: actions/cache@v4
        with:
          path: |
            ${{ steps.detect.outputs.scripts_dir }}/node_modules
          key: node-mod-${{ runner.os }}-${{ env.NODE_VERSION }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            node-mod-${{ runner.os }}-${{ env.NODE_VERSION }}-

      - name: Install playwright into scripts (npm --prefix) and chromium (smart)
        shell: bash
        run: |
          SCRIPTS="${{ steps.detect.outputs.scripts_dir }}"
          if [ -z "$SCRIPTS" ]; then
            echo "No scripts dir detected -> skip playwright install"
            exit 0
          fi

          if [ ! -d "$SCRIPTS/node_modules/playwright" ]; then
            npm install --prefix "$SCRIPTS" playwright --no-audit --no-fund --silent || { echo "npm install failed"; exit 1; }
          fi

          if [ -d "${HOME}/.cache/ms-playwright" ] && [ "$(ls -A ${HOME}/.cache/ms-playwright 2>/dev/null | wc -l)" -gt 0 ]; then
            echo "Playwright browsers already present -> skipping"
          else
            npx --yes --prefix "$SCRIPTS" playwright install chromium || { echo "playwright browser install failed"; exit 1; }
          fi

      - name: Verify playwright is importable (sanity)
        if: steps.detect.outputs.scripts_dir != ''
        run: |
          SCRIPTS="${{ steps.detect.outputs.scripts_dir }}"
          echo "Node version: $(node --version)"
          echo "NPM version: $(npm --version)"
          ls -la "$SCRIPTS/node_modules" | sed -n '1,200p' || true
          node -e "try { require('./${{ steps.detect.outputs.scripts_dir }}/node_modules/playwright'); console.log('playwright ok'); } catch(e) { console.error('playwright require failed:', e.message); process.exit(2); }"

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          if [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
          else
            pip install requests beautifulsoup4 feedgen lxml feedparser python-dateutil
          fi

      - name: Run feed generator (Python)
        run: |
          SCRIPTS="${{ steps.detect.outputs.scripts_dir }}"
          if [ -f "${SCRIPTS}/generate_feeds.py" ]; then
            python3 "${SCRIPTS}/generate_feeds.py"
          elif [ -f "scripts/generate_feeds.py" ]; then
            python3 scripts/generate_feeds.py
          else
            echo "generate_feeds.py not found -> abort"
            exit 1
          fi

      - name: Install tiny extras for Excel export
        run: |
          python -m pip install --upgrade pip
          pip install pandas openpyxl feedparser beautifulsoup4

      - name: Generate Excel summary of feeds
        run: |
          python3 scripts/feeds_to_excel.py
        shell: bash

      - name: Upload feeds Excel artifact
        uses: actions/upload-artifact@v4
        with:
          name: feeds-summary-${{ github.run_id }}-${{ github.run_number }}
          path: feeds_summary.xlsx
          if-no-files-found: warn
          retention-days: 7

      - name: Ensure output dir exists
        run: |
          mkdir -p feeds
          ls -la

      - name: Create timestamped zip of feeds
        id: create_zip
        run: |
          set -e
          ZIPNAME=feeds-${{ github.run_id }}-${{ github.run_number }}.zip
          if ls feeds/*.xml 1> /dev/null 2>&1; then
            zip -r "$ZIPNAME" feeds || true
          else
            mkdir -p feeds
            echo "no-feeds" > feeds/placeholder.txt
            zip -r "$ZIPNAME" feeds || true
          fi
          echo "zipname=$ZIPNAME" >> $GITHUB_OUTPUT
        shell: bash

      - name: Merge feeds (generate dist/merged-feed.xml)
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install feedparser feedgen python-dateutil
          fi
          python3 scripts/merge_feeds.py

      - name: Commit merged feed
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "actions@github.com"
          git add dist/merged-feed.xml || echo "no merged feed to add"
          # commit if there are staged changes
          if ! git diff --cached --quiet; then
            git commit -m "Update merged feed" || echo "commit failed"
            # fetch remote and rebase onto origin/main to avoid non-fast-forward
            git fetch origin main --depth=1 || true
            if git rebase origin/main; then
              git push origin HEAD:main || echo "git push failed"
            else
              echo "Rebase failed; aborting push"
              git rebase --abort || true
            fi
          else
            echo "no changes to commit"
          fi
          
      - name: Show produced feeds
        run: |
          echo "Feeds dir listing:"
          ls -la feeds || true
          for f in feeds/*.xml; do
            echo "---- $f ----"
            head -n 40 "$f" || true
          done
