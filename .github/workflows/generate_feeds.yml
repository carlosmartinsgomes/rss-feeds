name: Generate RSS feeds (stable + businesswire)

on:
  push:
    branches: [ main ]
  workflow_dispatch:
  schedule:
    # every 30 minutes
    - cron: '*/30 * * * *'

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      PYTHON_VERSION: '3.11'
      NODE_VERSION: '18'

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Show repo root (debug)
        run: |
          echo "GITHUB_WORKSPACE=$GITHUB_WORKSPACE"
          pwd
          ls -la

      - name: Detect scripts dir
        id: detect
        run: |
          if [ -d "./scripts" ]; then sd="scripts";
          elif [ -d "./rss-feeds/scripts" ]; then sd="rss-feeds/scripts";
          else sd=$(find . -type d -name scripts | head -n 1); sd="${sd#./}";
          fi
          echo "scripts_dir=$sd" >> $GITHUB_OUTPUT
          echo "Detected scripts_dir: $sd"
          if [ -n "$sd" ] && [ -f "$sd/sites.json" ]; then
            echo "sites.json exists at $sd/sites.json"
          else
            echo "sites.json not found at $sd/sites.json"
          fi

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install playwright into scripts (npm --prefix) and chromium
        if: steps.detect.outputs.scripts_dir != ''
        run: |
          SCRIPTS="${{ steps.detect.outputs.scripts_dir }}"
          echo "Installing playwright into $SCRIPTS (npm --prefix)..."
          npm install --prefix "$SCRIPTS" playwright --no-audit --no-fund --silent || { echo "npm install failed"; exit 1; }
          echo "Installing chromium browser (playwright) into $SCRIPTS (npx --prefix)..."
          npx --yes --prefix "$SCRIPTS" playwright install chromium || { echo "playwright browser install failed"; exit 1; }
          echo "Done playwright install."

      - name: Verify playwright is importable (sanity)
        if: steps.detect.outputs.scripts_dir != ''
        run: |
          SCRIPTS="${{ steps.detect.outputs.scripts_dir }}"
          echo "Node version: $(node --version)"
          echo "NPM version: $(npm --version)"
          echo "Listing $SCRIPTS/node_modules top entries:"
          ls -la "$SCRIPTS/node_modules" | sed -n '1,200p' || true
          node -e "try { require('./${{ steps.detect.outputs.scripts_dir }}/node_modules/playwright'); console.log('playwright ok'); } catch(e) { console.error('playwright require failed:', e.message); process.exit(2); }"

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          if [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
          else
            pip install requests beautifulsoup4 feedgen lxml
          fi

      - name: Render pages that need JS (explicit list, incl. BusinessWire)
        run: |
          SCRIPTS="${{ steps.detect.outputs.scripts_dir }}"
          if [ -z "$SCRIPTS" ]; then
            echo "No scripts dir detected -> skip rendering"
            exit 0
          fi
          mkdir -p "$SCRIPTS/rendered"
          # Explicit render targets (BusinessWire pages included)
          RENDER_TARGETS=(
            "https://inmodeinvestors.com/press-release|$SCRIPTS/rendered/inmode-press.html"
            "https://www.darkreading.com/|$SCRIPTS/rendered/darkreading.html"
            "https://www.iotworldtoday.com/|$SCRIPTS/rendered/iotworldtoday.html"
            "https://www.businesswire.com/newsroom|$SCRIPTS/rendered/businesswire-page1.html"
            "https://www.businesswire.com/newsroom?page=2|$SCRIPTS/rendered/businesswire-page2.html"
            "https://www.businesswire.com/newsroom?page=3|$SCRIPTS/rendered/businesswire-page3.html"
            "https://www.businesswire.com/newsroom?page=4|$SCRIPTS/rendered/businesswire-page4.html"
            "https://www.businesswire.com/newsroom?page=5|$SCRIPTS/rendered/businesswire-page5.html"
          )
          for pair in "${RENDER_TARGETS[@]}"; do
            url="${pair%%|*}"
            out="${pair##*|}"
            echo "Attempting render: $url -> $out"
            if [ ! -f "$SCRIPTS/render_page.js" ]; then
              echo "render_page.js not found at $SCRIPTS/render_page.js - skipping render for $url"
              continue
            fi
            node "$SCRIPTS/render_page.js" "$url" "$out" || echo "render failed for $url"
          done
          echo "Rendered dir listing:"
          ls -la "$SCRIPTS/rendered" || true


      - name: Render configured pages (for sites with render_file)
        run: |
          SCRIPTS="${{ steps.detect.outputs.scripts_dir }}"
          if [ -z "$SCRIPTS" ]; then
            echo "No scripts dir detected -> skip rendering"
            exit 0
          fi
          if [ ! -f "$SCRIPTS/sites.json" ]; then
            echo "No sites.json at $SCRIPTS/sites.json -> skip"
            exit 0
          fi
          if [ ! -f "$SCRIPTS/render_page.js" ]; then
            echo "render_page.js not found at $SCRIPTS/render_page.js - skip"
            exit 0
          fi
          # run Node code via heredoc to avoid shell expanding ${...}
          node <<'NODE'
          const fs = require('fs');
          const cp = require('child_process');
          const path = require('path');
          const scriptsDir = process.env.SCRIPTS;
          const sitesFile = path.join(scriptsDir, 'sites.json');
          let sites = [];
          try {
            const raw = fs.readFileSync(sitesFile, 'utf8');
            sites = JSON.parse(raw).sites || [];
          } catch (e) {
            console.error('Failed to read/parse sites.json:', e && e.message ? e.message : e);
            process.exit(0);
          }
          const renderScript = path.join(scriptsDir, 'render_page.js');
          for (const s of sites.filter(s => s.render_file)) {
            const url = s.url;
            const out = s.render_file;
            console.log('Rendering', url, '->', out);
            try {
              // execSync usando o render script dentro do scriptsDir
              cp.execSync(`node "${renderScript}" "${url.replace(/"/g,'\\"')}" "${out.replace(/"/g,'\\"')}"`, { stdio: 'inherit', timeout: 180000 });
            } catch (err) {
              console.error('Render failed for', url, '-', err && err.message ? err.message : err);
              // não abortar o workflow: apenas segue para o próximo site
            }
          }
          NODE




      - name: Run feed generator (Python)
        run: |
          SCRIPTS="${{ steps.detect.outputs.scripts_dir }}"
          if [ -f "${SCRIPTS}/generate_feeds.py" ]; then
            python3 "${SCRIPTS}/generate_feeds.py"
          elif [ -f "scripts/generate_feeds.py" ]; then
            python3 scripts/generate_feeds.py
          else
            echo "generate_feeds.py not found -> abort"
            exit 1
          fi

      - name: Show produced feeds
        run: |
          echo "Feeds dir listing:"
          ls -la feeds || true
          for f in feeds/*.xml; do
            echo "---- $f ----"
            head -n 40 "$f" || true
          done
