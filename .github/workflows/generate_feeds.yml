name: Generate RSS feeds (stable + businesswire)

on:
  push:
    branches: [ main ]
  workflow_dispatch:
  schedule:
    # every 30 minutes
    - cron: '*/30 * * * *'

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      PYTHON_VERSION: '3.11'
      NODE_VERSION: '18'

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Show repo root (debug)
        run: |
          echo "GITHUB_WORKSPACE=$GITHUB_WORKSPACE"
          pwd
          ls -la

      - name: Detect scripts dir
        id: detect
        run: |
          if [ -d "./scripts" ]; then sd="scripts";
          elif [ -d "./rss-feeds/scripts" ]; then sd="rss-feeds/scripts";
          else sd=$(find . -type d -name scripts | head -n 1); sd="${sd#./}";
          fi
          echo "scripts_dir=$sd" >> $GITHUB_OUTPUT
          echo "Detected scripts_dir: $sd"
          if [ -n "$sd" ] && [ -f "$sd/sites.json" ]; then
            echo "sites.json exists at $sd/sites.json"
          else
            echo "sites.json not found at $sd/sites.json"
          fi

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install playwright into scripts (npm --prefix) and chromium
        if: steps.detect.outputs.scripts_dir != ''
        run: |
          SCRIPTS="${{ steps.detect.outputs.scripts_dir }}"
          echo "Installing playwright into $SCRIPTS (npm --prefix)..."
          npm install --prefix "$SCRIPTS" playwright --no-audit --no-fund --silent || { echo "npm install failed"; exit 1; }
          echo "Installing chromium browser (playwright) into $SCRIPTS (npx --prefix)..."
          npx --yes --prefix "$SCRIPTS" playwright install chromium || { echo "playwright browser install failed"; exit 1; }
          echo "Done playwright install."

      - name: Verify playwright is importable (sanity)
        if: steps.detect.outputs.scripts_dir != ''
        run: |
          SCRIPTS="${{ steps.detect.outputs.scripts_dir }}"
          echo "Node version: $(node --version)"
          echo "NPM version: $(npm --version)"
          echo "Listing $SCRIPTS/node_modules top entries:"
          ls -la "$SCRIPTS/node_modules" | sed -n '1,200p' || true
          node -e "try { require('./${{ steps.detect.outputs.scripts_dir }}/node_modules/playwright'); console.log('playwright ok'); } catch(e) { console.error('playwright require failed:', e.message); process.exit(2); }"

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          if [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
          else
            pip install requests beautifulsoup4 feedgen lxml
          fi

      - name: Render pages that need JS (explicit list, incl. BusinessWire)
        run: |
          SCRIPTS="${{ steps.detect.outputs.scripts_dir }}"
          if [ -z "$SCRIPTS" ]; then
            echo "No scripts dir detected -> skip rendering"
            exit 0
          fi
          mkdir -p "$SCRIPTS/rendered"
          # ONLY explicit render targets (reduce duplicates/timeouts)
          RENDER_TARGETS=(
            "https://inmodeinvestors.com/press-release|$SCRIPTS/rendered/inmode-press.html"
            "https://www.darkreading.com/|$SCRIPTS/rendered/darkreading.html"
            "https://www.iotworldtoday.com/|$SCRIPTS/rendered/iotworldtoday.html"
            "https://www.businesswire.com/newsroom|$SCRIPTS/rendered/businesswire-page1.html"
            "https://www.businesswire.com/newsroom?page=2|$SCRIPTS/rendered/businesswire-page2.html"
            "https://www.businesswire.com/newsroom?page=3|$SCRIPTS/rendered/businesswire-page3.html"
            "https://www.businesswire.com/newsroom?page=4|$SCRIPTS/rendered/businesswire-page4.html"
            "https://www.businesswire.com/newsroom?page=5|$SCRIPTS/rendered/businesswire-page5.html"
          )
          for pair in "${RENDER_TARGETS[@]}"; do
            url="${pair%%|*}"
            out="${pair##*|}"
            echo "Attempting render: $url -> $out"
            if [ ! -f "$SCRIPTS/render_page.js" ]; then
              echo "render_page.js not found at $SCRIPTS/render_page.js - skipping render for $url"
              continue
            fi
            # run render; keep going on errors (we log)
            node "$SCRIPTS/render_page.js" "$url" "$out" || echo "render failed for $url"
          done
          echo "Rendered dir listing:"
          ls -la "$SCRIPTS/rendered" || true



      - name: Render configured pages (for sites with render_file)
        env:
          EXPLICIT_URLS: |
            https://inmodeinvestors.com/press-release
            https://www.darkreading.com/
            https://www.iotworldtoday.com/
            https://www.businesswire.com/newsroom
            https://www.businesswire.com/newsroom?page=2
            https://www.businesswire.com/newsroom?page=3
            https://www.businesswire.com/newsroom?page=4
            https://www.businesswire.com/newsroom?page=5
        run: |
          SCRIPTS="${{ steps.detect.outputs.scripts_dir }}"
          echo "Using SCRIPTS='$SCRIPTS' and EXPLICIT_URLS provided"

          node <<'NODE'
          const fs = require('fs');
          const cp = require('child_process');
          const path = require('path');

          function normalizeUrl(u) {
            try {
              const url = new URL(u);
              const p = url.pathname.replace(/\/+$/, '');
              return url.origin + (p || '/') + (url.search || '');
            } catch (e) {
              return String(u).trim().replace(/\/+$/, '');
            }
          }

          function hostOf(u) {
            try { return new URL(u).hostname.toLowerCase(); } catch(e){ return String(u).toLowerCase(); }
          }

          let scriptsDir = process.env.SCRIPTS || '';
          const explicitRaw = process.env.EXPLICIT_URLS || '';
          const explicit = explicitRaw.split(/\r?\n/).map(s => s.trim()).filter(Boolean).map(normalizeUrl);

          const candidates = ['scripts', 'rss-feeds/scripts', './scripts', './rss-feeds/scripts'];
          if (!scriptsDir) {
            for (const c of candidates) {
              try {
                if (fs.existsSync(path.join(c, 'sites.json')) && fs.existsSync(path.join(c, 'render_page.js'))) {
                  scriptsDir = c;
                  break;
                }
              } catch (e) {}
            }
          }

          if (!scriptsDir) {
            console.warn('Could not determine scripts directory. Skipping configured renders.');
            process.exit(0);
          }

          scriptsDir = scriptsDir.replace(/\/+$/,'');
          const sitesFile = path.join(scriptsDir, 'sites.json');
          if (!fs.existsSync(sitesFile)) {
            console.warn(`sites.json not found at ${sitesFile} -> skipping configured renders`);
            process.exit(0);
          }

          let sites = [];
          try {
            const raw = fs.readFileSync(sitesFile, 'utf8');
            sites = JSON.parse(raw).sites || [];
          } catch (e) {
            console.error('Failed to read/parse sites.json:', e && e.message ? e.message : e);
            process.exit(0);
          }

          const renderScript = path.join(scriptsDir, 'render_page.js');
          if (!fs.existsSync(renderScript)) {
            console.warn(`render_page.js not found at ${renderScript} -> skipping`);
            process.exit(0);
          }

          try { fs.mkdirSync(path.join(scriptsDir, 'rendered'), { recursive: true }); } catch(e){}

                   // WHITELIST: apenas estes hosts serão processados por este passo
          // WHITELIST: apenas estes hosts serão processados por este passo
          const allowedHosts = [
            'dzone.com',
            'eetimes.com',
            'mdpi.com',
            'medscape.com',
            'stocktwits.com',
            'journals.lww.com'
          ];

          function hostOf(urlString) {
            try {
              // tenta usar URL (lida com longos caminhos/params)
              const u = new URL(urlString);
              return (u.hostname || '').toLowerCase();
          } catch (e) {
          // fallback: tenta extrair com regex
            const m = String(urlString).toLowerCase().match(/:\/\/([^\/:?#]+)/);
            return m ? m[1].replace(/^www\./,'') : '';
          }
          }

          function hostMatchesAllowed(hostname) {
            if (!hostname) return false;
            hostname = hostname.toLowerCase().replace(/^www\./,'');
            return allowedHosts.some(a => hostname === a || hostname.endsWith('.' + a));
          }

          for (const s of sites.filter(s => s.render_file)) {
            const urlRaw = (s.url || '').trim();
            const host = hostOf(urlRaw);

            if (!hostMatchesAllowed(host)) {
            console.log('Skipping (not in configured whitelist):', urlRaw);
            continue;
            }

            const url = urlRaw;
            const out = s.render_file;
            console.log('Rendering', url, '->', out);
              try {
              const cmd = `node "${renderScript}" "${String(url).replace(/"/g,'\\"')}" "${String(out).replace(/"/g,'\\"')}"`;
              cp.execSync(cmd, { stdio: 'inherit', timeout: 180000 });
              console.log('-> Done:', url);
            } catch (err) {
              console.error('Render failed for', url, '-', err && err.message ? err.message : err);
            }
          }



            const out = s.render_file;
            console.log('Rendering', urlRaw, '->', out);
            try {
              const cmd = `node "${renderScript}" "${String(urlRaw).replace(/"/g,'\\"')}" "${String(out).replace(/"/g,'\\"')}"`;
              cp.execSync(cmd, { stdio: 'inherit', timeout: 180000 });
              console.log('-> Done:', urlRaw);
            } catch (err) {
              console.error('Render failed for', urlRaw, '-', err && err.message ? err.message : err);
            }
          }
          NODE






      - name: Run feed generator (Python)
        run: |
          SCRIPTS="${{ steps.detect.outputs.scripts_dir }}"
          if [ -f "${SCRIPTS}/generate_feeds.py" ]; then
            python3 "${SCRIPTS}/generate_feeds.py"
          elif [ -f "scripts/generate_feeds.py" ]; then
            python3 scripts/generate_feeds.py
          else
            echo "generate_feeds.py not found -> abort"
            exit 1
          fi

      - name: Show produced feeds
        run: |
          echo "Feeds dir listing:"
          ls -la feeds || true
          for f in feeds/*.xml; do
            echo "---- $f ----"
            head -n 40 "$f" || true
          done
